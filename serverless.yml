service: express-ALB

plugins:
  - serverless-fargate

custom:
  vpc:
    defaultVpcId: vpc-02babb95598ebd55b
    defaultSecurityGroup: sg-02f592e8908c5e3de
    defaultSubnetId1: subnet-00958fd8a47071819
    defaultSubnetId2: subnet-04e72b8e35800515c
    defaultCidr: 172.31.16.0/20

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}
  deploymentBucket:
    name: serverless-deployment-bucket-backend
  ecr:
    images:
      express-ALB:
        path: ./app-express/
        file: Dockerfile

fargate:
  clusterName: express-fargate-cluster
  containerInsights: true
  memory: 512
  cpu: 256
  architecture: X86_64
  vpc:
    assignPublicIp: true
    securityGroupIds:
      - Fn::GetAtt: [SecurityGroup0, GroupId]
    subnetIds:
      - ${self:custom.vpc.defaultSubnetId1}
  tasks:
    express-ALB-fargate-task:
      name: express-ALB-fargate-task
      image: express-ALB
      service:
        desiredCount: 2
        maximumPercent: 200  
      cloudFormationResource:
        container:
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
  cloudFormationResources:
    service:
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroup
          ContainerName: express-ALB-fargate-task
          ContainerPort: 8080

resources:
  Resources:
    SecurityGroup0:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: My Security Group for Express App on Fargate
        VpcId: ${self:custom.vpc.defaultVpcId}
        SecurityGroupIngress:
          - SourceSecurityGroupId: !Ref SecurityGroupALB
            IpProtocol: -1

    SecurityGroupALB:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: My Security Group for Express App on Fargate
        VpcId: ${self:custom.vpc.defaultVpcId}
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80

    ExpressALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ExpressALB
        SecurityGroups:
          - !Ref SecurityGroupALB
        Subnets:
          - ${self:custom.vpc.defaultSubnetId1}
          - ${self:custom.vpc.defaultSubnetId2}
    
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        Protocol: HTTP
        Port: 80
        LoadBalancerArn: !Ref ExpressALB
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref ALBTargetGroup

    ALBTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Port: 8080
        Protocol: HTTP
        TargetType: ip
        VpcId: ${self:custom.vpc.defaultVpcId}
